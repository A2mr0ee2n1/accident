import cv2
import os
import numpy as np
import tensorflow as tf
from skimage.transform import resize
from PIL import Image
import matplotlib.pyplot as plt
import random

def getFrame(sec, path, out_path, count):
    vidcap = cv2.VideoCapture(path)
    vidcap.set(cv2.CAP_PROP_POS_MSEC, sec * 1000)
    hasFrames, image = vidcap.read()
    if hasFrames:
        st_path = os.path.join(out_path, f"image{count}.jpg")
        cv2.imwrite(st_path, image)  # save frame as JPG file
    return hasFrames

temp_dir = 'test_input'
output_dir = 'output_frames'

for video_file in os.listdir(temp_dir):
    path = os.path.join(temp_dir, video_file)
    print(path)
    output_dir_folder = os.path.join(output_dir, video_file)
    os.mkdir(output_dir_folder)
    sec = 0
    frameRate = 2.0  # it will capture image every 2 seconds
    count = 1
    success = getFrame(sec, path, output_dir_folder, count)
    while success:
        count += 1
        sec += frameRate
        sec = round(sec, 2)
        success = getFrame(sec, path, output_dir_folder, count)

# Load model
model = tf.keras.models.load_model('model_train')
categories = ["Accident", "Non-Accident"]

# Prediction on test frames
main_dir = "test_frames"
for dirs in os.listdir(main_dir):
    test_dir = os.path.join(main_dir, dirs)
    print(test_dir)
    for img_t in os.listdir(test_dir):
        image = cv2.imread(os.path.join(test_dir, img_t), cv2.IMREAD_GRAYSCALE)
        image = resize(image, (128, 128))
        image = image / 255
        img_arr = image.reshape([1] + list(image.shape) + [1])
        predict_x = model.predict(img_arr)
        predict_class = np.argmax(predict_x, axis=1)
        if categories[predict_class[0]] == 'Accident':
            print(img_t, "\t", categories[predict_class[0]])
            im = Image.open(os.path.join('test_frames', dirs, img_t))
            im.show()

# Loading training data
X = np.load("labels/train_features.npy")
print("St 1")
Y = np.load("labels/train_labels.npy")
print("St 2")
X = X / 255
print("St 3")
X = X.reshape(list(X.shape) + [1])
print("St 4")
print(X.shape)

# Creating the model
model = Sequential()
model.add(Conv2D(32, (5, 5), activation="relu", input_shape=(128, 128, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(32, (5, 5), activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(1000, activation="relu"))
model.add(Dropout(0.5))
model.add(Dense(500, activation="relu"))
model.add(Dropout(0.5))
model.add(Dense(250, activation="relu"))
model.add(Dense(2, activation="softmax"))

# Compiling the model
model.compile(loss="sparse_categorical_crossentropy", optimizer="adam", metrics=["accuracy"])

# Training the model
train = model.fit(X, Y, batch_size=256, epochs=10, validation_split=0.2, shuffle=True)
model.save('model_train')

# Plotting the model accuracy
plt.plot(train.history["accuracy"])
plt.plot(train.history["val_accuracy"])
plt.title("Model Accuracy Visualization")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(['train', 'val'], loc="upper right")
plt.show()

# Getting train and test data
Train_DIR = r"/home/sparsh/Desktop/Accident_Detection/Accident-Dataset/train"
Test_DIR = r"/home/sparsh/Desktop/Accident_Detection/Accident-Dataset/test"
categories = ["Accident", "Non-Accident"]
test_data = []
train_data = []

def getTrainData():
    i = 0
    for index, category in enumerate(categories):
        path = os.path.join(Train_DIR, category)
        for img in os.listdir(path):
            i += 1
            print(i)
            try:
                image = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)
                image = resize(image, (128, 128))
                train_data.append([image, index])
            except Exception as e:
                pass

def getTestData():
    i = 0
    for index, category in enumerate(categories):
        path = os.path.join(Test_DIR, category)
        for img in os.listdir(path):
            i += 1
            print(i)
            try:
                image = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)
                image = resize(image, (128, 128))
                test_data.append([image, index])
            except Exception as e:
                pass

print("Getting Train Data")
getTrainData()

print("Getting Test Data")
getTestData()

random.shuffle(train_data)
random.shuffle(test_data)

train_features = []
train_labels = []
test_features = []
test_labels = []

for feature, label in train_data:
    train_features.append(feature)
    train_labels.append(label)

train_features = np.array(train_features)
train_labels = np.array(train_labels)
print(type(train_features))

for feature, label in test_data:
    test_features.append(feature)
    test_labels.append(label)

test_features = np.array(test_features)
test_labels = np.array(test_labels)
print(type(test_features))

print("Saving Numpy Arrays")
np.save("train_features", train_features)
np.save("train_labels", train_labels)
np.save("test_features", test_features)
np.save("test_labels", test_labels)
